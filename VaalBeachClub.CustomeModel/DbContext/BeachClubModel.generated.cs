//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor
//     https://github.com/msawczyn/EFDesigner
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace VaalBeachClub.CustomeModel
{
   /// <inheritdoc/>
   public partial class BeachClubModel : Microsoft.EntityFrameworkCore.DbContext
   {
      #region DbSets
      public virtual Microsoft.EntityFrameworkCore.DbSet<VaalBeachClub.Models.Domain.Addresses.Address> Addresses { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<VaalBeachClub.CustomeModel.BaseEntity> BaseEntities { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<VaalBeachClub.Web.Data.Identity.BeachClubRole> BeachClubRoles { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<VaalBeachClub.Web.Data.Identity.BeachClubRoleClaim> BeachClubRoleClaims { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<VaalBeachClub.Web.Data.Identity.BeachClubUser> BeachClubUsers { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<VaalBeachClub.Web.Data.Identity.BeachClubUserClaim> BeachClubUserClaims { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<VaalBeachClub.Web.Data.Identity.BeachClubUserLogin> BeachClubUserLogins { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<VaalBeachClub.Web.Data.Identity.BeachClubUserRole> BeachClubUserRoles { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<VaalBeachClub.Web.Data.Identity.BeachClubUserToken> BeachClubUserTokens { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<VaalBeachClub.Models.Domain.BoatHouses.BoatHouse> BoatHouses { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<VaalBeachClub.Models.Domain.CampSites.CampSite> CampSites { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<VaalBeachClub.Models.Domain.Addresses.ComplexAddress> ComplexAddresses { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<VaalBeachClub.Models.Domain.Addresses.POBoxAddress> POBoxAddresses { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<VaalBeachClub.Models.Domain.Addresses.StreetAddress> StreetAddresses { get; set; }
      #endregion DbSets

      /// <inheritdoc />
      public BeachClubModel() : base()
      {
      }

      /// <inheritdoc />
      public BeachClubModel(DbContextOptions<BeachClubModel> options) : base(options)
      {
      }

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         CustomInit(optionsBuilder);
      }

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.Entity<VaalBeachClub.Models.Domain.Addresses.Address>()
                     .Property(t => t.City)
                     .IsRequired();
         modelBuilder.Entity<VaalBeachClub.Models.Domain.Addresses.Address>()
                     .Property(t => t.Suburb)
                     .IsRequired();
         modelBuilder.Entity<VaalBeachClub.Models.Domain.Addresses.Address>()
                     .Property(t => t.Country)
                     .IsRequired();
         modelBuilder.Entity<VaalBeachClub.Models.Domain.Addresses.Address>()
                     .Property(t => t.AreaCode)
                     .IsRequired();

         modelBuilder.Entity<VaalBeachClub.CustomeModel.BaseEntity>()
                     .ToTable("BaseEntities")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<VaalBeachClub.CustomeModel.BaseEntity>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();

         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubRole>()
                     .ToTable("BeachClubRoles")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubRole>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubRole>()
                     .HasMany(x => x.UserRoles)
                     .WithOne()
                     .HasForeignKey("VaalBeachClub.Web.Data.Identity.BeachClubUserRoleUserRoles_Id")
                     .IsRequired();
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubRole>()
                     .HasMany(x => x.RoleClaims)
                     .WithOne()
                     .HasForeignKey("VaalBeachClub.Web.Data.Identity.BeachClubRoleClaimRoleClaims_Id")
                     .IsRequired();

         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubRoleClaim>()
                     .ToTable("BeachClubRoleClaims")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubRoleClaim>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubRoleClaim>()
                     .HasOne(x => x.Role)
                     .WithOne()
                     .HasForeignKey("VaalBeachClub.Web.Data.Identity.BeachClubRoleRole_Id")
                     .IsRequired();

         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUser>()
                     .ToTable("BeachClubUsers")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUser>()
                     .Property(t => t.FirstName)
                     .IsRequired();
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUser>()
                     .Property(t => t.LastName)
                     .IsRequired();
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUser>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUser>()
                     .HasMany(x => x.Claims)
                     .WithOne()
                     .HasForeignKey("VaalBeachClub.Web.Data.Identity.BeachClubUserClaimClaims_Id")
                     .IsRequired();
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUser>()
                     .HasMany(x => x.Logins)
                     .WithOne()
                     .HasForeignKey("VaalBeachClub.Web.Data.Identity.BeachClubUserLoginLogins_Id")
                     .IsRequired();
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUser>()
                     .HasMany(x => x.Tokens)
                     .WithOne()
                     .HasForeignKey("VaalBeachClub.Web.Data.Identity.BeachClubUserTokenTokens_Id")
                     .IsRequired();
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUser>()
                     .HasMany(x => x.UserRoles)
                     .WithOne()
                     .HasForeignKey("VaalBeachClub.Web.Data.Identity.BeachClubUserRoleUserRoles_Id")
                     .IsRequired();

         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUserClaim>()
                     .ToTable("BeachClubUserClaims")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUserClaim>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUserClaim>()
                     .HasOne(x => x.User)
                     .WithOne()
                     .HasForeignKey("VaalBeachClub.Web.Data.Identity.BeachClubUserUser_Id")
                     .IsRequired();

         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUserLogin>()
                     .ToTable("BeachClubUserLogins")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUserLogin>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUserLogin>()
                     .HasOne(x => x.User)
                     .WithOne()
                     .HasForeignKey("VaalBeachClub.Web.Data.Identity.BeachClubUserUser_Id")
                     .IsRequired();

         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUserRole>()
                     .ToTable("BeachClubUserRoles")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUserRole>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUserRole>()
                     .HasOne(x => x.User)
                     .WithOne()
                     .HasForeignKey("VaalBeachClub.Web.Data.Identity.BeachClubUserUser_Id")
                     .IsRequired();
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUserRole>()
                     .HasOne(x => x.Role)
                     .WithOne()
                     .HasForeignKey("VaalBeachClub.Web.Data.Identity.BeachClubRoleRole_Id")
                     .IsRequired();

         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUserToken>()
                     .ToTable("BeachClubUserTokens")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUserToken>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<VaalBeachClub.Web.Data.Identity.BeachClubUserToken>()
                     .HasOne(x => x.User)
                     .WithOne()
                     .HasForeignKey("VaalBeachClub.Web.Data.Identity.BeachClubUserUser_Id")
                     .IsRequired();

         modelBuilder.Entity<VaalBeachClub.Models.Domain.BoatHouses.BoatHouse>()
                     .Property(t => t.BoatHouseNumber)
                     .IsRequired();

         modelBuilder.Entity<VaalBeachClub.Models.Domain.CampSites.CampSite>()
                     .Property(t => t.CampSiteNumber)
                     .IsRequired();

         modelBuilder.Entity<VaalBeachClub.Models.Domain.Addresses.ComplexAddress>()
                     .Property(t => t.StreetNumber)
                     .IsRequired();
         modelBuilder.Entity<VaalBeachClub.Models.Domain.Addresses.ComplexAddress>()
                     .Property(t => t.StreetName)
                     .IsRequired();

         modelBuilder.Entity<VaalBeachClub.Models.Domain.Addresses.POBoxAddress>()
                     .Property(t => t.POBoxNumber)
                     .IsRequired();

         modelBuilder.Entity<VaalBeachClub.Models.Domain.Addresses.StreetAddress>()
                     .Property(t => t.StreetNumber)
                     .IsRequired();
         modelBuilder.Entity<VaalBeachClub.Models.Domain.Addresses.StreetAddress>()
                     .Property(t => t.StreetName)
                     .IsRequired();

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
